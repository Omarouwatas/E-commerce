import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import pickle

df = pd.read_csv("ventes_synthetiques_600.csv")
df = df.dropna(subset=["product_id"])
df["product_id"] = df["product_id"].astype(str)
df["date_commande"] = pd.to_datetime(df["date_commande"])
df = df.sort_values(by=["product_id", "date_commande"])
sequence_length = 7
X_all, y_all = [], []
product_scalers = {}
product_ids = df["product_id"].unique()
global_scaler = MinMaxScaler()

for pid in product_ids:
    product_df = df[df["product_id"] == pid]
    features = product_df[["quantite", "prix_unitaire", "quantite_disponible", "jour_semaine", "mois", "promo"]].values
    scaler = MinMaxScaler()
    features_scaled = scaler.fit_transform(features)
    product_scalers[pid] = scaler
    for i in range(len(features_scaled) - sequence_length):
        X_all.append(features_scaled[i:i+sequence_length])
        y_all.append(features_scaled[i+sequence_length][0])  

X = np.array(X_all)
y = np.array(y_all).reshape(-1, 1)

# === Normalisation de y ===
global_scaler.fit(y)
y = global_scaler.transform(y)

# === Construction et entraînement du modèle ===
model = Sequential()
model.add(LSTM(64, activation='relu', input_shape=(X.shape[1], X.shape[2])))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')
model.fit(X, y, epochs=50, batch_size=32)

# === Sauvegarde du modèle et des scalers ===
model.save("lstm_model.keras")
with open("scalers.pkl", "wb") as f:
    pickle.dump({
        "product_scalers": product_scalers,
        "global_scaler": global_scaler
    }, f)

print("Modèle et scalers sauvegardés avec succès.")
