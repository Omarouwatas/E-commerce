import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import json

ventes_df = pd.read_csv("ventes_synthetiques.csv")

with open("ML_model/commerce_platform.products.json", "r", encoding="utf-8") as f:
    products_data = json.load(f)
products_df = pd.DataFrame(products_data)
ventes_df["nom_produit"] = ventes_df["nom_produit"].str.strip().str.lower()
products_df["nom_produit"] = products_df["name"].str.strip().str.lower()
merged_df = ventes_df.merge(products_df, on="nom_produit", how="left")
produits_non_trouves = merged_df[merged_df["_id"].isnull()]["nom_produit"].unique()
if len(produits_non_trouves) > 0:
    print(" Produits non trouvés dans la base :", produits_non_trouves)
merged_df = merged_df.dropna(subset=["_id"])
merged_df["_id"] = merged_df["_id"].astype(int)
features = merged_df[["quantite", "prix_unitaire", "promo"]].values
scaler = MinMaxScaler()
scaled_features = scaler.fit_transform(features)
sequence_length = 3
X, y = [], []
grouped = merged_df.groupby("_id")
for product_id, group in grouped:
    product_features = group[["quantite", "prix_unitaire", "promo"]].values
    product_scaled = scaler.transform(product_features)
    for i in range(len(product_scaled) - sequence_length):
        X.append(product_scaled[i:i+sequence_length])
        y.append(product_scaled[i+sequence_length][0])  # prédire la quantité future

X = np.array(X)
y = np.array(y)

print(f" Données prêtes : X.shape = {X.shape}, y.shape = {y.shape}")

# === Construire le modèle LSTM
model = Sequential()
model.add(LSTM(64, activation='relu', input_shape=(X.shape[1], X.shape[2])))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')

# === Entraîner le modèle
model.fit(X, y, epochs=50, verbose=1)

# === Sauvegarder le modèle
model.save("lstm_model.keras")
print(" Modèle entraîné et sauvegardé.")
